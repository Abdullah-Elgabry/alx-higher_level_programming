Import function from module:
    >>> MyList = __import__('1-my_list').MyList

testing the <class type>:
    >>> ml = MyList()
    >>> type(ml) == MyList
    True

testing take an instance:
    >>> ml = MyList()
    >>> isinstance(ml, list)
    True

check if the -> print_sorted func is inst func or not:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

test calling the print_sorted func -> 0 args:
    >>> ml.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

test calling the print_sorted func -> 1 args:
    >>> ml.print_sorted([4, 2, 5])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

test calling the print_sorted func -> 2 args:
    >>> ml.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given

n/a checking:
    >>> ml = MyList()
    >>> ml.print_sorted()
    []

testing #1 basic:
    >>> ml = MyList([2, 10, 1])
    >>> ml.print_sorted()
    [1, 2, 10]

testing #2 adv:
    >>> ml = MyList([1, 4, 2, 3, 5])
    >>> ml.print_sorted()
    [1, 2, 3, 4, 5]

- testing:
    >>> ml = MyList([-1000, -98, -232565, 0, -23423434, -123])
    >>> ml.print_sorted()
    [-23423434, -232565, -1000, -123, -98, 0]

mixed [] testing:
    >>> ml = MyList([2, 10, 1, -10, 20, 100, 0])
    >>> ml.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]
    >>> ml
    [2, 10, 1, -10, 20, 100, 0]

arranged [] test:
    >>> ml = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> ml.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]

the addition testing:
    >>> ml = MyList()
    >>> ml.append(10)
    >>> ml
    [10]